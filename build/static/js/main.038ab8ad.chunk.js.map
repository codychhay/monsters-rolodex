{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","onChangeHandler","react_default","a","createElement","className","type","placeholder","onChange","Card","name","email","id","src","concat","alt","CardList","cardList","map","card","card_component","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","searchField","target","value","state","_this2","fetch","then","resp","json","userArray","catch","err","console","log","message","_this$state","filteredCardList","filter","toLowerCase","includes","search_box_component","card_list_component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAaeA,eAVG,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,gBAChB,OACQC,EAAAC,EAAAC,cAAA,SACIC,UAAU,aACVC,KAAK,SACLC,YAAY,kBACZC,SAAUP,MCKXQ,SAVF,SAAAT,GAAuB,IAArBU,EAAqBV,EAArBU,KAAMC,EAAeX,EAAfW,MAAOC,EAAQZ,EAARY,GACxB,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKS,IAAG,wBAAAC,OAA0BF,EAA1B,0BAAsDG,IAAI,UAClEb,EAAAC,EAAAC,cAAA,UAAKM,GACLR,EAAAC,EAAAC,cAAA,SAAIO,MCSDK,SAZE,SAAAhB,GAAgB,IAAdiB,EAAcjB,EAAdiB,SACf,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEPY,EAASC,IAAI,SAAAC,GAAI,OACbjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMC,IAAKF,EAAKP,GAAIF,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,MAAOC,GAAIO,EAAKP,UCoCtEU,cApCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcJzB,gBAAkB,SAAC6B,GAEfP,EAAKQ,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAfzCX,EAAKY,MAAQ,CACTlB,SAAY,GACZe,YAAc,IAJRT,mFAQM,IAAAa,EAAAV,KAChBW,MAAM,8CACDC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GAAS,OAAIL,EAAKL,SAAS,CAACd,SAAYwB,MAC7CC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAIG,4CAQ7B,IAAAC,EAC2BrB,KAAKS,MAA9BlB,EADF8B,EACE9B,SAAUe,EADZe,EACYf,YACXgB,EAAmB/B,EAASgC,OAAO,SAAA9B,GAAI,OAAIA,EAAKT,KAAKwC,cAAcC,SAASnB,EAAYkB,iBAC9F,OACIhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACgD,EAAD,CAAWnD,gBAAiByB,KAAKzB,kBACjCC,EAAAC,EAAAC,cAACiD,EAAD,CAAUpC,SAAU+B,YAhClBM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.038ab8ad.chunk.js","sourcesContent":["import React from \"react\"\nimport './search-box.styles.css'\n\nconst SearchBox = ({onChangeHandler}) => {\n    return (\n            <input\n                className='search-box'\n                type='search'\n                placeholder='Search Monsters'\n                onChange={onChangeHandler}/>\n    )\n};\n\nexport default SearchBox;","import React from 'react'\n\nimport './card.styles.css'\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='card-container'>\n            <img src={`https://robohash.org/${id}?set=set2&size=180x180`} alt='robot' />\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react'\n\nimport Card from '../card/card.component'\n\nimport './card-list.styles.css'\n\nconst CardList = ({cardList}) => {\n    return (\n        <div className='card-list'>\n            {\n                cardList.map(card => (\n                    <Card key={card.id} name={card.name} email={card.email} id={card.id} />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nimport './App.css';\nimport SearchBox from './components/search-box/search-box.component'\nimport CardList from './components/card-list/card-list.component'\n\nclass App extends React.Component {\n    // PLAN--\n    //  - Fetch cardList array after componentDidMount, to make sure we have thing to mount to.\n    //  - SearchBox Functionality-- define eventHandler for handling onChange, capture input value and filter cardList.\n\n    constructor() {\n        super();\n        this.state = {\n            'cardList': [],\n            'searchField':''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(resp => resp.json())\n            .then(userArray => this.setState({'cardList': userArray}))\n            .catch(err => console.log(err.message));\n    }\n\n    onChangeHandler = (event) => {\n        // After search input val is set, it will trigger render()\n        this.setState({searchField: event.target.value})\n    };\n\n    render() {\n        const {cardList, searchField} = this.state;\n        const filteredCardList = cardList.filter(card => card.name.toLowerCase().includes(searchField.toLowerCase()));\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n                <SearchBox onChangeHandler={this.onChangeHandler} />\n                <CardList cardList={filteredCardList} />\n            </div>\n        );\n    }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}